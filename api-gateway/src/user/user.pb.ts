// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.27.3
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "userService";

export interface ServiceResponseMeta {
  statusCode: number;
  message: string;
}

export interface User {
  id: string;
  createdAt: string;
  updatedAt: string;
  email: string;
  avatar: string;
  createdBy: string;
}

export interface PaginationMeta {
  page: number;
  take: number;
  itemCount: number;
  pageCount: number;
  hasPreviousPage: boolean;
  hasNextPage: boolean;
}

export interface GetAllUsersResponse {
  data: User[];
  meta: PaginationMeta | undefined;
}

export interface GetAllUserRequest {
  take: number;
  page: number;
  q: string;
}

export interface GetAllUserServiceResponse {
  response: GetAllUsersResponse | undefined;
  meta: ServiceResponseMeta | undefined;
}

export const USER_SERVICE_PACKAGE_NAME = "userService";

export interface UserServiceClient {
  getAllUsers(request: GetAllUserRequest): Observable<GetAllUserServiceResponse>;
}

export interface UserServiceController {
  getAllUsers(
    request: GetAllUserRequest,
  ): Promise<GetAllUserServiceResponse> | Observable<GetAllUserServiceResponse> | GetAllUserServiceResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAllUsers"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
